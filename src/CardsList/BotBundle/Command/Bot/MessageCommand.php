<?php

declare(strict_types=1);

namespace CardsList\BotBundle\Command\Bot;

use CardsList\BotBundle\Entity\CreditCard;
use CardsList\BotBundle\Entity\User;
use CardsList\BotBundle\Manager\CreditCardManager;
use Inacho\CreditCard as InachoCreditCard;
use Doctrine\ORM\EntityManagerInterface;
use Longman\TelegramBot\Conversation;
use Longman\TelegramBot\Request;

/**
 * Class MessageCommand
 *
 * @package CardsList\BotBundle\Command\Bot
 */
class MessageCommand extends BotCommand
{
    /**
     * @var EntityManagerInterface
     */
    private $entityManager;

    /**
     * @var CreditCardManager
     */
    private $creditCardManager;

    /**
     * MessageCommand constructor.
     *
     * @param EntityManagerInterface $entityManager
     * @param CreditCardManager $creditCardManager
     */
    public function __construct(
        EntityManagerInterface $entityManager,
        CreditCardManager $creditCardManager
    )
    {
        $this->entityManager = $entityManager;
        $this->creditCardManager = $creditCardManager;
    }

    /**
     * {@inheritdoc}
     */
    public function execute()
    {
        $message = $this->getMessage();
        $user = $message->getFrom();
        $chat_id = $message->getChat()->getId();

        $conversation = new Conversation($user->getId(), $chat_id);
        if (true === $conversation->exists()) {
            $holderName = $message->getText();

            if ('add' === $conversation->getCommand()) {
                $userEntity = $this->entityManager->find(User::class, $user->getId());
                $creditCard = new CreditCard();
                $creditCard->setNumber($conversation->notes['number']);
                $creditCard->setType($conversation->notes['type']);
                $creditCard->setUser($userEntity);

                $messageText = '–Ø —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª –∫–∞—Ä—Ç—É –≤ –í–∞—à —Å–ø–∏—Å–æ–∫.';
            } else {
                $creditCard = $this->creditCardManager->findCard($conversation->notes['card_id']);
                if (null === $creditCard) {
                    return Request::sendMessage(
                        [
                            'chat_id' => $chat_id,
                            'text' => '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –∫–∞—Ä—Ç–∞ –Ω–µ–±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ :(',
                        ]
                    );
                }

                $messageText = '–Ø —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –í–∞—à—É –∫–∞—Ä—Ç—É.';
            }

            $creditCard->setHolderName(trim($holderName));

            $this->entityManager->persist($creditCard);
            $this->entityManager->flush();

            $conversation->stop();

            return Request::sendMessage(
                [
                    'chat_id' => $chat_id,
                    'text' => $messageText.PHP_EOL.
                        '/list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫'.PHP_EOL.PHP_EOL.
                        sprintf(
                            'üë§ %s '.PHP_EOL.'üí≥ %s',
                            $creditCard->getHolderName(),
                            $creditCard->getNumber()
                        ),
                    'reply_markup' => [
                        'inline_keyboard' => [
                            [
                                [
                                    'text' => 'üó£',
                                    'switch_inline_query' => $creditCard->getNumber(),
                                ],
                                [
                                    'text' => '‚úèÔ∏è',
                                    'callback_data' => json_encode(
                                        [
                                            'command' => 'edit',
                                            'card_id' => $creditCard->getId(),
                                        ]
                                    ),
                                ],
                                [
                                    'text' => '‚ùå',
                                    'callback_data' => json_encode(
                                        [
                                            'command' => 'delete',
                                            'card_id' => $creditCard->getId(),
                                        ]
                                    ),
                                ],
                            ],
                        ],
                    ],
                ]
            );
        }

        $cardValid = InachoCreditCard::validCreditCard($message->getText());
        if (false === $cardValid['valid']) {
            return Request::sendMessage(
                [
                    'chat_id' => $chat_id,
                    'text' => '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ "'.$message->getText().'" –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã'.PHP_EOL.
                        '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!',
                ]
            );
        }

        /** @var CreditCard $creditCard */
        $creditCard = $this->entityManager->createQueryBuilder()
            ->select('credit_card')
            ->from('CardsListBotBundle:CreditCard', 'credit_card')
            ->where('credit_card.number = :number')
            ->andWhere('credit_card.user = :user_id')
            ->setParameters(
                [
                    'number' => $cardValid['number'],
                    'user_id' => $user->getId(),
                ]
            )
            ->getQuery()
            ->getOneOrNullResult();

        if (null !== $creditCard) {
            return Request::sendMessage(
                [
                    'chat_id' => $chat_id,
                    'text' => '–¢–∞–∫–∞—è –∫–∞—Ä—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'.PHP_EOL.PHP_EOL.
                        sprintf(
                            'üë§ %s '.PHP_EOL.'üí≥ %s',
                            $creditCard->getHolderName(),
                            $creditCard->getNumber()
                        ),
                    'reply_markup' => [
                        'inline_keyboard' => [
                            [
                                [
                                    'text' => 'üó£',
                                    'switch_inline_query' => $creditCard->getNumber(),
                                ],
                                [
                                    'text' => '‚úèÔ∏è',
                                    'callback_data' => json_encode(
                                        [
                                            'command' => 'edit',
                                            'card_id' => $creditCard->getId(),
                                        ]
                                    ),
                                ],
                                [
                                    'text' => '‚ùå',
                                    'callback_data' => json_encode(
                                        [
                                            'command' => 'delete',
                                            'card_id' => $creditCard->getId(),
                                        ]
                                    ),
                                ],
                            ],
                        ],
                    ],
                ]
            );
        }

        $conversation = new Conversation($user->getId(), $chat_id, 'add');
        $conversation->notes = [
            'number' => $cardValid['number'],
            'type' => $cardValid['type'],
        ];
        $conversation->update();

        return Request::sendMessage(
            [
                'chat_id' => $chat_id,
                'text' => '–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è —Å–æ–±—Å—Ç–≤–µ–Ω–∏–∫–∞ –∫–∞—Ä—Ç—ã —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã!',
            ]
        );
    }
}
